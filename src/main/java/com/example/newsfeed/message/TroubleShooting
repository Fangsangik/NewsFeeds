메시지 전송 방식에 대한 고민

처음에는 관계형 DB에 메시지를 저장하고, 메시지를 읽어와서 메시지를 전송하는 방식을 생각했다.
하지만 성능문제를 고민을 안 할수가 없었다.
1. 대량의 동시 요청 처리
채팅 시스템은 많은 사용자가 실시간으로 메시지를 송수신, 대량의 읽기 쓰기가 필요
관계형 DB는 동시성을 처리하는데 한계가 있어 병목 현상 발생 가능성

2. 쓰기 작업 부담
매번 메시지 전송 시 데이터를 영구적 저장, Transaction 관리와 디스크 I/O 작업이 필요

3. 확장성 부족
관계형 DB는 기본적으로 수직 확장에 더 적합, Scale Out은 어려움
채팅 시스탬은 사용자와 메시지 수가 증가하면서 수평 확장이 필요
관계형 DB에 데이터 분할을 적용하면 관리 복잡성이 증가

4. 지연 발생
메시지 저장하고 읽기 쓰기를 위해 트랜잭션이 필요 => WebSocket & Redis와 같은 메모리 기반
솔루션에 비해 지연 시간이 길어짐
락의 경우 다수의 클라이언트가 동일한 데이터를 읽거나 쓰려고 하면 테이블 락이나 행락으로 인한 대기 시간 증가

그래서 생각한 방법은 NoSQL을 사용하는 것이다.
NoSQL은 수평 확장이 가능하고, 대량의 데이터를 빠르게 처리할 수 있다.
그중에서 Redis를 사용하기로 결정했다.
Redis는 메모리 기반 데이터 저장소로, 읽기와 쓰기가 매우 빠르다고 알고 있다.
그리고 Redis는 Pub/Sub 기능을 제공하기 때문에 채팅 시스템에 적합하다고 생각했다.
하지만 Redis는 메모리 기반 데이터 저장소이기 때문에 서버가 다운되면 데이터가 모두 사라진다.
그래서 Redis에 저장된 메시지를 관계형 DB에 저장하는 방법을 생각했다.


WebSocket을 사용한 이유
그래서 처음 생각 한 방법은 SSE 방법이다.
SSE(Server-Sent Events)는 서버에서 클라이언트로 단방향 메시지를 보내는 기술이다.
구현은 간편하고, 서버에서 클라이언트로 메시지를 보내는 방식이기 때문에 서버의 부하를 줄일 수 있다.
하지만 SSE는 HTTP/1.1 기반으로 동작하기 때문에 HTTP/2와 같은 최신 프로토콜을 사용할 수 없고,
서버에 부하가 많아지면 성능이 저하될 수 있다.
그래서 SSE 방법을 사용하지 않고 WebSocket을 사용하기로 결정했다.